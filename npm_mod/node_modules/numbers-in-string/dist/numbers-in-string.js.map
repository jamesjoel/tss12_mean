{"version":3,"file":"numbers-in-string.js","sources":["../src/index.js"],"sourcesContent":["/**\r\n * Extracts numbers from a string.\r\n *\r\n * @param {string} str The string to extract numbers from.\r\n * @param {function} filter An optional function filter function.\r\n * @returns {number[]} Array of extracted numbers.\r\n */\r\nfunction numbers(str, filter) {\r\n  if (!str || typeof str !== 'string') {\r\n    return [];\r\n  }\r\n\r\n  // removes everything that isn't a number, a dot, a minus sign or a plus sign\r\n  let string = str\r\n    .replace(/[^0-9.\\-+]/g, ' ')\r\n    // multiple dots get replaced with space\r\n    .replace(/[.][.]+/g, ' ')\r\n    // collapses minus signs\r\n    .replace(/[-][-]+/g, '-')\r\n    // removes plus signs\r\n    .replace(/(?<=\\d)\\+(?=\\d)/g, ' ')\r\n    .replace(/\\+/g, '')\r\n    // collapses all spaces\r\n    .replace(/\\s\\s+/g, ' ')\r\n    // splits at spaces\r\n    .split(/ +/g);\r\n\r\n  // converts everything to numbers and removes the NaN's\r\n  const extractedNums = string.map(n => parseFloat(n)).filter(n => !Number.isNaN(n));\r\n\r\n  if (filter && typeof filter === 'function') {\r\n    return extractedNums.filter(filter);\r\n  }\r\n  return extractedNums;\r\n}\r\n\r\nmodule.exports = numbers;\r\n"],"names":["module","exports","str","filter","extractedNums","replace","split","map","n","parseFloat","Number","isNaN"],"mappings":"AAoCAA,OAAOC,QA7BP,SAAiBC,EAAKC,GACpB,IAAKD,GAAsB,iBAARA,EACjB,MAAO,GAIT,IAeME,EAfOF,EACVG,QAAQ,cAAe,KAEvBA,QAAQ,WAAY,KAEpBA,QAAQ,WAAY,KAEpBA,QAAQ,mBAAoB,KAC5BA,QAAQ,MAAO,IAEfA,QAAQ,SAAU,KAElBC,MAAM,OAGoBC,IAAI,SAAAC,UAAKC,WAAWD,KAAIL,OAAO,SAAAK,UAAME,OAAOC,MAAMH,KAE/E,OAAIL,GAA4B,mBAAXA,EACZC,EAAcD,OAAOA,GAEvBC"}